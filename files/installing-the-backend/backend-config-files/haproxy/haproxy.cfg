global
	lua-load /usr/local/etc/haproxy/cors.lua
defaults
	log global
	mode http
	timeout connect 5000ms
	timeout client 50000ms
	timeout server 50000ms
	option httplog
	log stdout local0

frontend stats
	bind *:8404
	stats enable
	stats uri /
	stats refresh 10s
frontend http_frontend
	bind :3035
	compression algo gzip
	compression type text/css text/html text/javascript application/javascript text/plain text/xml application/json
	# CORS configuration
	# capture origin HTTP header
	capture request header origin len 128
	# add Access-Control-Allow-Origin HTTP header to response if origin matches the list of allowed URLs
	http-response add-header Access-Control-Allow-Origin %[capture.req.hdr(0)] if !METH_OPTIONS { capture.req.hdr(0) -m reg -f /usr/local/etc/haproxy/cors-origins.lst }
	# if a preflight request is made, use CORS preflight backend
	http-request use-service lua.cors-response if METH_OPTIONS { capture.req.hdr(0) -m reg -f /usr/local/etc/haproxy/cors-origins.lst }
	
	
	acl has_account-service path_beg /account-service
    	acl has_sql_query path_reg ^\/api\/projects\/[0-9]*\/sql$
    	acl has_graphql_query path_reg ^\/api\/projects\/[0-9]*\/graphql$
    	acl has_platform path_beg /api/projects
   
    	use_backend account-service if has_account-service
    	use_backend query-service if has_sql_query
    	use_backend query-service if has_graphql_query
	
	default_backend empty
backend platform
	http-request set-header Host localhost
	http-response set-header Server None
	server platform hrp-platform:3030 check
backend account-service
	http-request set-header Host localhost
	http-response set-header Server None
	server account-service hrp-account-service:8080 check
backend query-service
	http-request set-header Host localhost
	http-response set-header Server None
	server query-service hrp-data-query-service:3030 check
backend empty
	errorfile 503 /usr/local/etc/haproxy/errors/404.http
